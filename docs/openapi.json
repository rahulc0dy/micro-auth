{
  "openapi": "3.0.3",
  "info": {
    "title": "Micro Auth API",
    "version": "1.0.0",
    "description": "Authentication microservice: JWT, OAuth, Email/Phone login, and 2FA support."
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Register with email/phone and password.",
        "requestBody": {
          "description": "User registration data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login a user",
        "description": "Authenticate via email/phone and password.",
        "requestBody": {
          "description": "Login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns JWT"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh JWT token",
        "description": "Refresh the user's JWT session token.",
        "responses": {
          "200": {
            "description": "Token refreshed, returns new JWT"
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout current session",
        "description": "Invalidate current user session.",
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/oauth/{provider}": {
      "get": {
        "summary": "Redirect to OAuth provider",
        "description": "Redirects to third-party OAuth provider.",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OAuth provider name (e.g., google, github)"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection to provider"
          }
        }
      }
    },
    "/oauth/callback": {
      "get": {
        "summary": "OAuth callback handler",
        "description": "Handles OAuth provider callback and issues a JWT.",
        "responses": {
          "200": {
            "description": "Authenticated, returns JWT"
          },
          "400": {
            "description": "Invalid callback or provider configuration"
          }
        }
      }
    },
    "/auth/2fa/setup": {
      "post": {
        "summary": "Setup 2FA",
        "description": "Generate a 2FA QR code for the user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "QR code generated"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/2fa/verify": {
      "post": {
        "summary": "Verify 2FA OTP",
        "description": "Verify the supplied OTP for 2FA.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "OTP verification payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 6
                  }
                },
                "required": ["otp"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP valid, 2FA activated"
          },
          "400": {
            "description": "Invalid OTP"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
